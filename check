#!/bin/bash
#
# Copyright (C) 2017 Omar Sandoval
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. common/rc

usage () {
	USAGE_STRING="\
usage: $0 [-g group] [-x exclude_group] [test...]
       $0 -h

Test groups:
  -g group    run tests belonging to this group; may be specified multiple
              times
  -x group    don't run tests belonging to this group; takes precedence over
              -g, may be specified multiple times

Miscellaneous:
  -h    display this help message and exit

Examples:
Run the default set of tests, i.e., the \"auto\" group:
    ./check
Run all NVMe and SCSI tests except for those that involve discard:
    ./check -g nvme -g scsi -x discard
Run two specific tests:
    ./check block/001 block/002
Run a specific test in addition to the default set of tests:
    ./check -g auto block/003"

	case "$1" in
		out)
			echo "$USAGE_STRING"
			exit 0
			;;
		err)
			echo "$USAGE_STRING" >&2
			exit 1
			;;
	esac
}

declare -A INCLUDE_GROUPS
declare -A EXCLUDE_GROUPS
declare -A TESTS

while getopts "g:x:h" OPT; do
	case "$OPT" in
		g)
			INCLUDE_GROUPS["$OPTARG"]=1
			;;
		x)
			EXCLUDE_GROUPS["$OPTARG"]=1
			;;
		h)
			usage out;
			;;
		*)
			usage err;
			;;
	esac
done

shift $((OPTIND - 1))

for test in "$@"; do
	TESTS["$test"]=1
done

if [[ ${#TESTS[@]} -eq 0 && ${#INCLUDE_GROUPS[@]} -eq 0 ]]; then
	INCLUDE_GROUPS[auto]=1
fi

if ! . config; then
	exit 1
fi

if [[ ! -v TEST_DEVS ]]; then
	_error "\$TEST_DEVS not defined in ./config"
fi

for TEST_DEV in "${TEST_DEVS[@]}"; do
	if [[ ! -e $TEST_DEV ]]; then
		_error "${TEST_DEV} does not exist"
	elif [[ ! -b $TEST_DEV ]]; then
		_error "${TEST_DEV} is not a block device"
	fi
done

_call_test() {
	local test_func="$1"
	local seqres="${RESULTS_DIR}/${TEST_NAME}"
	local fail
	local elapsed
	FULL="${seqres}.full"

	mkdir -p "$(dirname "$seqres")"

	if [[ -w /dev/kmsg ]]; then
		local dmesg_marker="run blktests $TEST_NAME at $(date "+%F %T")"
		echo "$dmesg_marker" >> /dev/kmsg
	else
		CHECK_DMESG=0
	fi

	TMPDIR="$(mktemp --tmpdir -d "blktests.${category}.${seq}.XXX")"
	if [[ $? -ne 0 ]]; then
		retur
	fi

	TIMEFORMAT="%R"
	elapsed="$(time ( "$test_func" >"${seqres}.out" 2>&1 ) 2>&1)"
	local exit_status=$?

	rm -rf "$TMPDIR"

	if ! diff "tests/${TEST_NAME}.out" "${seqres}.out" >/dev/null; then
		mv "${seqres}.out" "${seqres}.out.bad"
		printf '[failed]\n'
		diff -u "tests/${TEST_NAME}.out" "${seqres}.out.bad" | awk "
		{
			if (NR > 10) {
				print \"    ...\"
				print \"    (Run 'diff -u tests/${TEST_NAME}.out ${seqres}.out.bad' to see the entire diff)\"
				exit
			}
			print \"    \" \$0
		}"
		fail=out
	elif [[ $exit_status -ne 0 ]]; then
		echo "$exit_status" > "${seqres}.exitstatus"
		printf '[failed]\n    exited with status %d\n' $exit_status
		fail=exit
	elif [[ $CHECK_DMESG -ne 0 ]]; then
		dmesg | bash -c "$DMESG_FILTER" | grep -A 9999 "$dmesg_marker" >"${seqres}.dmesg"
		grep -q -e "kernel BUG at" \
		     -e "WARNING:" \
		     -e "BUG:" \
		     -e "Oops:" \
		     -e "possible recursive locking detected" \
		     -e "Internal error" \
		     -e "INFO: suspicious RCU usage" \
		     -e "INFO: possible circular locking dependency detected" \
		     -e "general protection fault:" \
		     "${seqres}.dmesg"
		if [[ $? -eq 0 ]]; then
			printf '[failed]\n    something found in dmesg:\n'
			awk "
			{
				if (NR > 10) {
					print \"    ...\"
					print \"    (See '${seqres}.dmesg' for the entire message)\"
					exit
				}
				print \"    \" \$0
			}" < "${seqres}.dmesg"
			fail=dmesg
		else
			rm -f "${seqres}.dmesg"
		fi
	fi
	rm -f "${seqres}.out"

	if [[ -z "$fail" ]]; then
		printf '%.1fs\n' "$elapsed"
		echo "${TEST_NAME} pass ${elapsed}" >> "${RESULTS_DIR}/log"
		return 0
	else
		if [[ -e $FULL ]]; then
			echo "    (There may be more information in $FULL)"
		fi
		echo "${TEST_NAME} fail ${fail}" >> "${RESULTS_DIR}/log"
		return 1
	fi
}

_should_run_test() {
	local test
	local group
	local include_group
	local exclude_group

	if [[ -n ${TESTS[$TEST_NAME]} ]]; then
		return 0
	fi

	local ret=1
	for group in "${TEST_GROUPS[@]}"; do
		if [[ -n ${INCLUDE_GROUPS[$group]} ]]; then
			ret=0
			break
		fi
		if [[ -n ${EXCLUDE_GROUPS[$group]} ]]; then
			return 1
		fi
	done

	return $ret
}

_run_test() {
	TEST_NAME="$1"
	CHECK_DMESG=1
	DMESG_FILTER=cat

	if ! . "tests/${TEST_NAME}"; then
		return
	fi

	if [[ ! -v TEST_GROUPS ]]; then
		_warning "${TEST_NAME} does not define TEST_GROUPS"
		return
	fi

	if declare -fF test >/dev/null && declare -fF test_device >/dev/null; then
		_warning "${TEST_NAME} defines both test() and test_device()"
		return
	fi

	if ! declare -fF test >/dev/null && ! declare -fF test_device >/dev/null; then
		_warning "${TEST_NAME} does not define test() or test_device()"
		return
	fi

	if ! _should_run_test; then
		return
	fi

	if declare -fF prepare >/dev/null && ! prepare; then
		printf '%s [not run]\n    %s\n' "$TEST_NAME" "$SKIP_REASON"
		return
	fi

	if declare -fF test >/dev/null; then
		local last_time="$(grep "^$TEST_NAME pass" results.last/nodev/log 2>/dev/null | cut -d' ' -f3)"
		if [[ -z $last_time ]]; then
			printf '%s ... ' "$TEST_NAME"
		else
			printf '%s %.1fs ... ' "$TEST_NAME" "$last_time"
		fi
		RESULTS_DIR="results/nodev"
		_call_test test
	else
		for TEST_DEV in "${CATEGORY_TEST_DEVS[@]}"; do
			local test_dev="$(basename "${TEST_DEV}")"
			local last_time="$(grep "^$TEST_NAME pass" "results.last/${test_dev}/log" 2>/dev/null | cut -d' ' -f3)"
			if [[ -z $last_time ]]; then
				printf '%s => %s ... ' "$TEST_NAME" "$test_dev"
			else
				printf '%s => %s %.1fs ... ' "$TEST_NAME" "$test_dev" "$last_time"
			fi
			if declare -fF prepare_device >/dev/null && ! prepare_device; then
				printf '[not run]\n    %s\n' "$SKIP_REASON"
				continue
			fi
			RESULTS_DIR="results/${test_dev}"
			_call_test test_device
		done
	fi
}

_run_category() {
	local category="$1"

	# Most of this script is written defensively against whitespace in the
	# test name, but we can't handle it in the test logs.
	if [[ $category =~ [[:space:]] ]]; then
		_error "category name \"${category}\" contains whitespace"
		return
	fi

	if ! . "tests/${category}/category"; then
		return
	fi

	if ! declare -fF prepare >/dev/null; then
		_warning "${category} does not define prepare()"
		return
	fi

	if ! declare -fF prepare_device >/dev/null; then
		_warning "${category} does not define prepare_device()"
		return
	fi

	if ! prepare; then
		printf '%s/*** [not run]\n    %s\n' "$category" "$SKIP_REASON"
		return
	fi

	declare -a CATEGORY_TEST_DEVS
	for TEST_DEV in "${TEST_DEVS[@]}"; do
		if prepare_device; then
			CATEGORY_TEST_DEVS+=("$TEST_DEV")
		fi
	done
	if [[ ${#CATEGORY_TEST_DEVS} -eq 0 ]]; then
		printf '%s/*** [not run]\n    %s\n' "$category" "no suitable devices"
		return
	fi

	unset prepare prepare_device

	while IFS= read -r -d '' seq; do
		( _run_test "${category}/${seq}" )
	done < <(find "tests/${category}" -mindepth 1 -maxdepth 1 -type f \
		 -not -name '*.out' -not -name category -printf '%P\0' | sort -z)
}

if [[ $EUID -ne 0 ]]; then
	_error "must be run as root"
fi

if [[ -d results ]]; then
	rm -rf results.last
	mv results results.last
fi

while IFS= read -r -d '' category; do
	( _run_category "${category}" )
done < <(find tests -mindepth 1 -maxdepth 1 -type d -printf '%P\0' | sort -z)
