#!/bin/bash
#
# Smoke test !mq timeout handling with null-blk.
#
# Copyright (C) 2018 Jens Axboe
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. tests/block/rc

DESCRIPTION="run null-blk with legacy blk path and timeout injection configured"

requires() {
	_have_module null-blk && _have_module_param null_blk timeout
}

test() {
	echo "Running ${TEST_NAME}"

	modprobe -r null_blk

	# The format is "<interval>,<probability>,<space>,<times>". Here, we
	# fail 50% of I/Os.
	modprobe null_blk queue_mode=1 timeout='1,50,0,-1'

	local scheds
	# shellcheck disable=SC2207
	scheds=($(sed 's/[][]//g' /sys/block/nullb0/queue/scheduler))

	for sched in "${scheds[@]}"; do
		echo "Testing $sched" >> "$FULL"
		echo "$sched" > /sys/block/nullb0/queue/scheduler
		# Do a bunch of I/Os which will timeout and then complete. The
		# only thing we're really testing here is that this doesn't
		# crash or hang.
		for ((i = 0; i < 100; i++)); do
			dd if=/dev/nullb0 of=/dev/null bs=4K count=4 \
				iflag=direct status=none &
		done
		wait
	done

	udevadm settle
	modprobe -r null_blk

	echo "Test complete"
}
