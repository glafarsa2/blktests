#!/bin/bash
#
# Default helper functions for NVMe devices.
#
# Copyright (C) 2018 Johannes Thumshirn
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

NVMET_CFS="/sys/kernel/config/nvmet/"

_test_dev_is_nvme() {
	if ! readlink -f "$TEST_DEV_SYSFS/device" | grep -q nvme; then
		SKIP_REASON="$TEST_DEV is not a NVMe device"
		return 1
	fi
	return 0
}

_create_nvmet_port() {
	local trtype="$1"

	local port
	for ((port = 0; ; port++)); do
		if [[ ! -e "${NVMET_CFS}/ports/${port}" ]]; then
			break
		fi
	done

	mkdir "${NVMET_CFS}/ports/${port}"
	echo "${trtype}" > "${NVMET_CFS}/ports/${port}/addr_trtype"

	echo "${port}"
}

_remove_nvmet_port() {
	local port="$1"
	rmdir "${NVMET_CFS}/ports/${port}"
}

_create_nvmet_subsystem() {
	local nvmet_subsystem="$1"
	local blkdev="$2"
	local uuid="00000000-0000-0000-0000-000000000000"
	local cfs_path="${NVMET_CFS}/subsystems/${nvmet_subsystem}"

	if [[ $# -eq 3 ]]; then
		uuid="$3"
	fi

	mkdir -p "${cfs_path}"
	echo 1 > "${cfs_path}/attr_allow_any_host"
	mkdir "${cfs_path}/namespaces/1"
	printf "%s" "$blkdev" > "${cfs_path}/namespaces/1/device_path"
	printf "%s" "$uuid" > "${cfs_path}/namespaces/1/device_uuid"
	printf 1 > "${cfs_path}/namespaces/1/enable"
}

_remove_nvmet_subsystem() {
	local nvmet_subsystem="$1"
	local cfs_path="${NVMET_CFS}/subsystems/${nvmet_subsystem}"

	echo 0 > "${cfs_path}/namespaces/1/enable"
	rmdir "${cfs_path}/namespaces/1/"
	rmdir "${cfs_path}"
}

_add_nvmet_subsys_to_port() {
	local port="$1"
	local nvmet_subsystem="$2"

	ln -s "${NVMET_CFS}/subsystems/${nvmet_subsystem}" \
		"${NVMET_CFS}/ports/${port}/subsystems/${nvmet_subsystem}"
}

_remove_nvmet_subsystem_from_port() {
	local port="$1"
	local nvmet_subsystem="$2"

	rm "${NVMET_CFS}/ports/${port}/subsystems/${nvmet_subsystem}"
}

_find_nvme_loop_dev() {
	local dev
	local transport
	for dev in /sys/class/nvme/nvme*; do
		dev="$(basename "$dev")"
		transport="$(cat "/sys/class/nvme/${dev}/transport")"
		if [[ "$transport" == "loop" ]]; then
			echo "$dev"
		fi
	done
}
